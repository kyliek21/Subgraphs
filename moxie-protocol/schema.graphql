type BlockInfo @entity {
  id: ID!
  hash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type SubjectFactorySubjectOnboardingFinishedTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!

  subject: Bytes!
  subjectToken: Bytes!
  auctionId: BigInt!
  bondingSupply: BigInt!
  bondingAmount: BigInt!
  protocolFee: BigInt!
  subjectFee: BigInt!
  txn: Transaction!
}

type SubjectFactorySubjectOnboardingInitiatedTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!

  subject: Bytes!
  subjectToken: Bytes!
  auctionAmount: BigInt!
  biddingToken: Bytes!
  auctionEndDate: BigInt!
  auctionId: BigInt!
  txn: Transaction!
}

type MoxieBondingCurveBondingCurveInitializedTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  subject: Bytes!
  subjectToken: Bytes!
  initialSupply: BigInt!
  reserve: BigInt!
  reserveRatio: BigInt!
  txn: Transaction!
}

type MoxieBondingCurveSubjectSharePurchasedTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  subject: Bytes!
  sellToken: Bytes!
  sellAmount: BigInt!
  buyToken: Bytes!
  buyAmount: BigInt!
  beneficiary: Bytes!
  txn: Transaction!
}

type MoxieBondingCurveSubjectShareSoldTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  subject: Bytes!
  sellToken: Bytes!
  sellAmount: BigInt!
  buyToken: Bytes!
  buyAmount: BigInt!
  beneficiary: Bytes!
  txn: Transaction!
}

type MoxieBondingCurveUpdateBeneficiaryTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  beneficiary: Bytes!
  txn: Transaction!
}

type MoxieBondingCurveUpdateFeesTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  protocolBuyFeePct: BigInt!
  protocolSellFeePct: BigInt!
  subjectBuyFeePct: BigInt!
  subjectSellFeePct: BigInt!
  txn: Transaction!
}

type MoxieBondingCurveUpdateFormulaTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  formula: Bytes!
  txn: Transaction!
}

type TokenManagerTokenDeployedTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  beneficiary: Bytes!
  token: Bytes!
  initialSupply: BigInt!
  txn: Transaction!
}

type SubjectTokenTransferTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  contractAddress: Bytes!
  from: Bytes!
  to: Bytes!
  value: BigInt!
  txn: Transaction!
}
type VaultDepositTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!

  subject: Bytes!
  token: Bytes!
  sender: Bytes!
  amount: BigInt!
  totalReserve: BigInt!
  txn: Transaction!
}

type VaultTransferTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!

  subject: Bytes!
  token: Bytes!
  to: Bytes!
  amount: BigInt!
  totalReserve: BigInt!
  txn: Transaction!
}

# actual entities

type SubjectTokenRollingDailySnapshot @entity {
  "subjectId+-+endTimestamp"
  id: ID!
  "start block timestamp"
  startTimestamp: BigInt!
  "end block timestamp"
  endTimestamp: BigInt!
  "subject token address"
  subjectToken: SubjectToken!

  "address of the beneficiary"
  beneficiary: User
  "reserve balance (moxie)/ total locked value"
  reserve: BigInt!

  "price of the token at the start of the snapshot"
  startPrice: BigDecimal!
  "price of the token at the end of the snapshot"
  endPrice: BigDecimal!
  "daily price change"
  dailyPriceChange: BigDecimal!

  "Total supply of the token"
  totalSupply: BigInt!

  "total number of unique holders at start of the snapshot"
  startUniqueHolders: BigInt!
  "total number of unique holders at end of the snapshot"
  endUniqueHolders: BigInt!
  "daily unique holders change"
  dailyUniqueHoldersChange: BigInt!

  "amount of moxie used to buy or sell this subject token at start of the snapshot"
  startVolume: BigInt!
  "amount of moxie used to buy or sell this subject token at end of the snapshot"
  endVolume: BigInt!
  "daily volume change"
  dailyVolumeChange: BigInt!

  "total beneficiary fee at start of the snapshot"
  startBeneficiaryFee: BigInt!
  "total beneficiary fee at end of the snapshot"
  endBeneficiaryFee: BigInt!
  "daily beneficiary fee change"
  dailyBeneficiaryFeeChange: BigInt!
  "total protocol fee at start of the snapshot"
  startProtocolFee: BigInt!
  "total protocol fee at end of the snapshot"
  endProtocolFee: BigInt!
  "daily protocol fee change"
  dailyProtocolFeeChange: BigInt!

  createdAtBlockInfo: BlockInfo!
  updatedAtBlockInfo: BlockInfo!
  initialHourlySnapshot: SubjectTokenHourlySnapshot
}

type SubjectTokenDailySnapshot @entity {
  "subjectId+-+endTimestamp"
  id: ID!
  "start block timestamp"
  startTimestamp: BigInt!
  "end block timestamp"
  endTimestamp: BigInt!
  "subject token address"
  subjectToken: SubjectToken!

  "address of the beneficiary"
  beneficiary: User
  "reserve balance (moxie)/ total locked value"
  reserve: BigInt!

  "price of the token at the start of the snapshot"
  startPrice: BigDecimal!
  "price of the token at the end of the snapshot"
  endPrice: BigDecimal!
  "daily price change"
  dailyPriceChange: BigDecimal!

  "Total supply of the token"
  totalSupply: BigInt!

  "total number of unique holders at start of the snapshot"
  startUniqueHolders: BigInt!
  "total number of unique holders at end of the snapshot"
  endUniqueHolders: BigInt!
  "daily unique holders change"
  dailyUniqueHoldersChange: BigInt!

  "amount of moxie used to buy or sell this subject token at start of the snapshot"
  startVolume: BigInt!
  "amount of moxie used to buy or sell this subject token at end of the snapshot"
  endVolume: BigInt!
  "daily volume change"
  dailyVolumeChange: BigInt!

  "total beneficiary fee at start of the snapshot"
  startBeneficiaryFee: BigInt!
  "total beneficiary fee at end of the snapshot"
  endBeneficiaryFee: BigInt!
  "daily beneficiary fee change"
  dailyBeneficiaryFeeChange: BigInt!
  "total protocol fee at start of the snapshot"
  startProtocolFee: BigInt!
  "total protocol fee at end of the snapshot"
  endProtocolFee: BigInt!
  "daily protocol fee change"
  dailyProtocolFeeChange: BigInt!

  createdAtBlockInfo: BlockInfo!
  updatedAtBlockInfo: BlockInfo!
  initialHourlySnapshot: SubjectTokenHourlySnapshot
}

type SubjectTokenHourlySnapshot @entity {
  "subjectId+-+endTimestamp"
  id: ID!
  "start block timestamp"
  startTimestamp: BigInt!
  "end block timestamp"
  endTimestamp: BigInt!
  "subject token address"
  subjectToken: SubjectToken!

  "address of the beneficiary"
  beneficiary: User
  "reserve balance (moxie)/ total locked value"
  reserve: BigInt!

  "price of the token at the start of the snapshot"
  startPrice: BigDecimal!
  "price of the token at the end of the snapshot"
  endPrice: BigDecimal!
  "hourly price change"
  hourlyPriceChange: BigDecimal!

  "Total supply of the token"
  totalSupply: BigInt!

  "total number of unique holders at start of the snapshot"
  startUniqueHolders: BigInt!
  "total number of unique holders at end of the snapshot"
  endUniqueHolders: BigInt!
  "hourly unique holders change"
  hourlyUniqueHoldersChange: BigInt!

  "amount of moxie used to buy or sell this subject token at start of the snapshot"
  startVolume: BigInt!
  "amount of moxie used to buy or sell this subject token at end of the snapshot"
  endVolume: BigInt!
  "hourly volume change"
  hourlyVolumeChange: BigInt!

  "total beneficiary fee at start of the snapshot"
  startBeneficiaryFee: BigInt!
  "total beneficiary fee at end of the snapshot"
  endBeneficiaryFee: BigInt!
  "hourly beneficiary fee change"
  hourlyBeneficiaryFeeChange: BigInt!
  "total protocol fee at start of the snapshot"
  startProtocolFee: BigInt!
  "total protocol fee at end of the snapshot"
  endProtocolFee: BigInt!
  "hourly protocol fee change"
  hourlyProtocolFeeChange: BigInt!
  createdAtBlockInfo: BlockInfo!
  updatedAtBlockInfo: BlockInfo!
}

type SubjectToken @entity {
  "address of the subject token"
  id: ID!
  "name of the token"
  name: String!
  "symbol of the token"
  symbol: String!
  "decimals of the token"
  decimals: BigInt!
  "address of the beneficiary"
  beneficiary: User
  "reserve balance in vault"
  reserve: BigInt!
  "current price of the token in Moxie"
  currentPriceinMoxie: BigDecimal!
  "current price of the token in Moxie in wei unit"
  currentPriceinWeiInMoxie: BigDecimal!
  "constant used to calculate bonding curve"
  reserveRatio: BigInt!
  "Total supply of the token"
  totalSupply: BigInt!
  "initial supply when bonding curve is initialized"
  initialSupply: BigInt!

  "total number of unique holders"
  uniqueHolders: BigInt!
  "amount of moxie used to buy or sell this subject token"
  volume: BigInt!
  "snapshots"
  hourlySnapshots: [SubjectTokenHourlySnapshot!]! @derivedFrom(field: "subjectToken")
  dailySnapshots: [SubjectTokenDailySnapshot!]! @derivedFrom(field: "subjectToken")
  latestRollingDailySnapshot: SubjectTokenRollingDailySnapshot
  "total beneficiary fees collected"
  beneficiaryFee: BigInt!
  "total protocol fees collected"
  protocolFee: BigInt!
  "beneficiary fee transfer"
  beneficiaryFeeTransfers: [SubjectFeeTransfer!]! @derivedFrom(field: "subjectToken")
  "protocol fee transfers"
  protocolFeeTransfers: [ProtocolFeeTransfer!]! @derivedFrom(field: "subjectToken")
  "portfolios with this subject"
  portfolio: [Portfolio!]! @derivedFrom(field: "subjectToken")
  "created at block information"
  createdAtBlockInfo: BlockInfo!
  "updated at block information"
  updatedAtBlockInfo: BlockInfo!

  "Moxie spent by all users buy this subject token"
  protocolTokenSpent: BigInt!
  "Moxie earned by all user to sell the subject token"
  protocolTokenEarned: BigInt!
  "total moxie invested by the user, after reducing when user sells the token"
  protocolTokenInvested: BigDecimal!
  "orders associated with the subject"
  orders: [Order!]! @derivedFrom(field: "subjectToken")

  auction: Auction
  status: OnboardingStatus!
}
enum OnboardingStatus {
  OnboardingInitialized
  OnboardingFinished
}

"data from subjectOnboardingFinished event"
type Auction @entity {
  id: ID!

  subjectToken: SubjectToken
  "_bondingAmount + _protocolFee + _subjectFee -> from auction , should be added in summary buyVolume "
  amountRaised: BigInt!

  subjectFee: BigInt!
  protocolFee: BigInt!

  startTxHash: Bytes!
  endTxHash: Bytes
  startBlockInfo: BlockInfo!
  endBlockInfo: BlockInfo
}

type Portfolio @entity {
  "User's address+-+Subject's token address"
  id: ID!
  "User's address"
  user: User!
  "Subject's token address"
  subjectToken: SubjectToken!
  "Net quantity of the subject token by the user"
  balance: BigInt!
  "Moxie spent by user to buy the subject token(buyShare + auctionOrders)"
  protocolTokenSpent: BigInt!
  "Moxie earned by user to sell the subject token"
  protocolTokenEarned: BigInt!
  "total moxie invested by the user"
  protocolTokenInvested: BigDecimal!
  "Orders associated with the user's portfolio"
  orders: [Order!]! @derivedFrom(field: "portfolio")
  "created at block information"
  createdAtBlockInfo: BlockInfo!
  "updated at block information"
  updatedAtBlockInfo: BlockInfo!
}

type User @entity {
  "Ethereum address of the user"
  id: ID!
  "User's Portfolio for each subject token he/she holds"
  portfolio: [Portfolio!]! @derivedFrom(field: "user")
  "orders placed by the user (auction, buy & sell)"
  orders: [Order!]! @derivedFrom(field: "user")
  "orders responsible for the user's portfolio - auction & buy orders"
  protocolOrders: [UserProtocolOrder!]! @derivedFrom(field: "user")
  "beneficiary fee transfers"
  subjectFeeTransfer: [SubjectFeeTransfer!]!
  "total moxie spent by the user"
  protocolTokenSpent: BigInt!
  "Moxie earned by user to sell the subject token"
  protocolTokenEarned: BigInt!
  "total moxie invested by the user"
  protocolTokenInvested: BigDecimal!
  "total number of orders (auction & buyOrders)"
  protocolOrdersCount: BigInt!
  "created at block information"
  createdAtBlockInfo: BlockInfo!
  "updated at block information"
  updatedAtBlockInfo: BlockInfo!
}

# these are orders used to calculate the user's portfolio
type UserProtocolOrder @entity {
  "User's address+-+userProtocolOrderIndex"
  id: ID!
  "index of the order"
  userProtocolOrderIndex: BigInt!
  "User's address"
  user: User!
  "Order's id"
  order: Order!
  "subject token address"
  subjectToken: SubjectToken!
}

type Order @entity {
  "txHash+-+logIndex"
  id: ID!
  "Moxie Token address"
  protocolToken: Bytes!
  "Amount of moxie token"
  protocolTokenAmount: BigInt!
  "Subject Token address"
  subjectToken: SubjectToken!
  "Amount of subject token"
  subjectAmount: BigInt!
  "Amount of subject token Left to be sold in the order"
  subjectAmountLeft: BigInt!
  "investment amount in moxie"
  protocolTokenInvested: BigDecimal!
  "Price of the subject token"
  price: BigDecimal!
  "BUY/SELL order type"
  orderType: OrderType
  "Seller/Buyer of Fan token"
  user: User!
  "associated portfolio"
  portfolio: Portfolio!
  "subject fee transaction"
  subjectFeeTransfer: SubjectFeeTransfer! @derivedFrom(field: "order")
  "protocol fee transaction"
  protocolFeeTransfer: ProtocolFeeTransfer! @derivedFrom(field: "order")
  "block information"
  blockInfo: BlockInfo!
  "user order index"
  userProtocolOrderIndex: BigInt!
  "auction order status"
  auctionOrderStatus: AuctionOrderStatus!
}
enum AuctionOrderStatus {
  NA
  PLACED
  CLAIMED
  CANCELLED
}

enum OrderType {
  SELL
  BUY
  AUCTION
}

type ProtocolFeeBeneficiary @entity {
  "address of the beneficiary"
  id: ID!
  "address of the beneficiary"
  beneficiary: Bytes!
  "total fees collected by the protocol"
  totalFees: BigInt!

  "protocol fee transfers"
  protocolFeeTransfers: [ProtocolFeeTransfer!]! @derivedFrom(field: "beneficiary")
}

type ProtocolFeeTransfer @entity {
  "txHash+-+logIndex"
  id: ID!
  "txHash of the transaction"
  txHash: Bytes!
  "block information"
  blockInfo: BlockInfo!
  "order"
  order: Order!
  "subject token address"
  subjectToken: SubjectToken!
  "ProtocolFee Beneficiary"
  beneficiary: ProtocolFeeBeneficiary!
  "amount of moxie transferred"
  amount: BigInt!
}

type SubjectFeeTransfer @entity {
  "txHash"
  id: ID!
  "txHash of the transaction"
  txHash: Bytes!
  "block information"
  blockInfo: BlockInfo!
  "order"
  order: Order!
  "subject token address"
  subjectToken: SubjectToken!
  "address of the beneficiary"
  beneficiary: User
  "amount of moxie transferred"
  amount: BigInt!
}

type Summary @entity {
  id: ID!
  totalTokensIssued: BigInt!
  "total reserve in the vault"
  totalReserve: BigInt!
  "total protocol token spent by all users - after reducing when user sells the token"
  totalProtocolTokenInvested: BigDecimal!
  activeProtocolFeeBeneficiary: ProtocolFeeBeneficiary
  protocolBuyFeePct: BigInt!
  protocolSellFeePct: BigInt!
  subjectBuyFeePct: BigInt!
  subjectSellFeePct: BigInt!

  numberOfBuyOrders: BigInt!
  numberOfSellOrders: BigInt!
  numberOfAuctionOrders: BigInt!
  numberOfUsers: BigInt!

  "total moxie spent in buy orders + initialization"
  totalBuyVolume: BigInt!
  totalSellVolume: BigInt!

  totalProtocolFee: BigInt!
  totalProtocolFeeFromAuction: BigInt!

  totalSubjectFee: BigInt!
  totalSubjectFeeFromAuction: BigInt!
}

type MoxieTransferTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  from: Bytes!
  to: Bytes!
  value: BigInt!
  txn: Transaction!
}

type AuctionNewSellOrderTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  "auctioning token/subject token"
  subjectToken: SubjectToken!
  userId: BigInt!
  buyAmount: BigInt!
  sellAmount: BigInt!
  txn: Transaction!
}

type AuctionClaimedFromOrderTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  "auctioning token /subject token"
  subjectToken: SubjectToken!
  userId: BigInt!
  buyAmount: BigInt!
  sellAmount: BigInt!
  txn: Transaction!
}

type AuctionCancellationSellOrderTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  "auctioning token /subject token"
  subjectToken: SubjectToken!
  userId: BigInt!
  buyAmount: BigInt!
  sellAmount: BigInt!
  txn: Transaction!
}

type AuctioningToken @entity {
  "auctionId"
  id: ID!
  "auctioning token /subject token"
  subjectToken: SubjectToken!
}

type AuctionOrder @entity {
  "subjectId+-+userId+-+buyAmount+-+sellAmount"
  id: ID!
  "associated protocol order"
  order: Order!
  auctionClaimedFromOrderTx: AuctionClaimedFromOrderTx
  auctionCancellationSellOrderTx: AuctionCancellationSellOrderTx
  auctionNewSellOrderTx: AuctionNewSellOrderTx
}

type Transaction @entity {
  "txhash"
  id: ID!
  subjectTokenTransferTx: [SubjectTokenTransferTx!]! @derivedFrom(field: "txn")
  moxieTransferTx: [MoxieTransferTx!]! @derivedFrom(field: "txn")
  auctionClaimedFromOrderTx: [AuctionClaimedFromOrderTx!]! @derivedFrom(field: "txn")
  auctionNewSellOrderTx: [AuctionNewSellOrderTx!]! @derivedFrom(field: "txn")
  auctionCancellationSellOrderTx: [AuctionCancellationSellOrderTx!]! @derivedFrom(field: "txn")
  moxieBondingCurveBondingCurveInitializedTx: [MoxieBondingCurveBondingCurveInitializedTx!]! @derivedFrom(field: "txn")
  moxieBondingCurveSubjectSharePurchasedTx: [MoxieBondingCurveSubjectSharePurchasedTx!]! @derivedFrom(field: "txn")
  moxieBondingCurveSubjectShareSoldTx: [MoxieBondingCurveSubjectShareSoldTx!]! @derivedFrom(field: "txn")
  moxieBondingCurveUpdateBeneficiaryTx: [MoxieBondingCurveUpdateBeneficiaryTx!]! @derivedFrom(field: "txn")
  moxieBondingCurveUpdateFeesTx: [MoxieBondingCurveUpdateFeesTx!]! @derivedFrom(field: "txn")
  moxieBondingCurveUpdateFormulaTx: [MoxieBondingCurveUpdateFormulaTx!]! @derivedFrom(field: "txn")
  tokenManagerTokenDeployedTx: [TokenManagerTokenDeployedTx!]! @derivedFrom(field: "txn")
  vaultDepositTx: [VaultDepositTx!]! @derivedFrom(field: "txn")
  vaultTransferTx: [VaultTransferTx!]! @derivedFrom(field: "txn")
}
