type BlockInfo @entity {
  id: ID!
  hash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type MoxieBondingCurveBondingCurveInitializedTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  subject: Bytes!
  subjectToken: Bytes!
  initialSupply: BigInt!
  reserve: BigInt!
  reserveRatio: BigInt!
}

type MoxieBondingCurveSubjectSharePurchasedTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  subject: Bytes!
  sellToken: Bytes!
  sellAmount: BigInt!
  buyToken: Bytes!
  buyAmount: BigInt!
  beneficiary: Bytes!
}

type MoxieBondingCurveSubjectShareSoldTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  subject: Bytes!
  sellToken: Bytes!
  sellAmount: BigInt!
  buyToken: Bytes!
  buyAmount: BigInt!
  beneficiary: Bytes!
}

type MoxieBondingCurveUpdateBeneficiaryTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  beneficiary: Bytes!
}

type MoxieBondingCurveUpdateFeesTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  protocolBuyFeePct: BigInt!
  protocolSellFeePct: BigInt!
  subjectBuyFeePct: BigInt!
  subjectSellFeePct: BigInt!
}

type MoxieBondingCurveUpdateFormulaTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  formula: Bytes!
}

type TokenManagerTokenDeployedTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  beneficiary: Bytes!
  token: Bytes!
  initialSupply: BigInt!
}

type SubjectTokenTransferTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: AuctionTransfer!
  blockInfo: BlockInfo!
  contractAddress: Bytes!
  from: Bytes!
  to: Bytes!
  value: BigInt!
}
type VaultDepositTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!

  subject: Bytes!
  token: Bytes!
  sender: Bytes!
  amount: BigInt!
  totalReserve: BigInt!
}

type VaultTransferTx @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!

  subject: Bytes!
  token: Bytes!
  to: Bytes!
  amount: BigInt!
  totalReserve: BigInt!
}

# actual entities

type SubjectDailySnapshot @entity {
  "subjectId+-+endTimestamp"
  id: ID!
  "end block timestamp"
  endTimestamp: BigInt!
  "subject token address"
  subject: Subject!

  "address of the beneficiary"
  beneficiary: User
  "reserve balance (moxie)/ total locked value"
  reserve: BigInt!

  "price of the token at the start of the snapshot"
  startPrice: BigDecimal!
  "price of the token at the end of the snapshot"
  endPrice: BigDecimal!
  "daily price change"
  dailyPriceChange: BigDecimal!

  "Total supply of the token"
  totalSupply: BigInt!

  "total number of unique holders at start of the snapshot"
  startUniqueHolders: BigInt!
  "total number of unique holders at end of the snapshot"
  endUniqueHolders: BigInt!
  "daily unique holders change"
  dailyUniqueHoldersChange: BigInt!

  "amount of moxie used to buy or sell this subject token at start of the snapshot"
  startVolume: BigInt!
  "amount of moxie used to buy or sell this subject token at end of the snapshot"
  endVolume: BigInt!
  "daily volume change"
  dailyVolumeChange: BigInt!

  "total beneficiary fee at start of the snapshot"
  startBeneficiaryFee: BigInt!
  "total beneficiary fee at end of the snapshot"
  endBeneficiaryFee: BigInt!
  "daily beneficiary fee change"
  dailyBeneficiaryFeeChange: BigInt!
  "total protocol fee at start of the snapshot"
  startProtcolFee: BigInt!
  "total protocol fee at end of the snapshot"
  endProtcolFee: BigInt!
  "daily protocol fee change"
  dailyProtcolFeeChange: BigInt!
}

type SubjectHourlySnapshot @entity {
  "subjectId+-+endTimestamp"
  id: ID!
  "end block timestamp"
  endTimestamp: BigInt!
  "subject token address"
  subject: Subject!

  "address of the beneficiary"
  beneficiary: User
  "reserve balance (moxie)/ total locked value"
  reserve: BigInt!

  "price of the token at the start of the snapshot"
  startPrice: BigDecimal!
  "price of the token at the end of the snapshot"
  endPrice: BigDecimal!
  "hourly price change"
  hourlyPriceChange: BigDecimal!

  "Total supply of the token"
  totalSupply: BigInt!

  "total number of unique holders at start of the snapshot"
  startUniqueHolders: BigInt!
  "total number of unique holders at end of the snapshot"
  endUniqueHolders: BigInt!
  "hourly unique holders change"
  hourlyUniqueHoldersChange: BigInt!

  "amount of moxie used to buy or sell this subject token at start of the snapshot"
  startVolume: BigInt!
  "amount of moxie used to buy or sell this subject token at end of the snapshot"
  endVolume: BigInt!
  "hourly volume change"
  hourlyVolumeChange: BigInt!

  "total beneficiary fee at start of the snapshot"
  startBeneficiaryFee: BigInt!
  "total beneficiary fee at end of the snapshot"
  endBeneficiaryFee: BigInt!
  "hourly beneficiary fee change"
  hourlyBeneficiaryFeeChange: BigInt!
  "total protocol fee at start of the snapshot"
  startProtcolFee: BigInt!
  "total protocol fee at end of the snapshot"
  endProtcolFee: BigInt!
  "hourly protocol fee change"
  hourlyProtcolFeeChange: BigInt!
}

type Subject @entity {
  "address of the subject token"
  id: ID!
  "name of the token"
  name: String!
  "symbol of the token"
  symbol: String!
  "decimals of the token"
  decimals: BigInt!
  "address of the beneficiary"
  beneficiary: User
  "reserve balance (moxie)/ total locked value"
  reserve: BigInt!
  "constant used to calculate bonding curve"
  reserveRatio: BigInt!
  "current price of the token"
  currentPrice: BigDecimal!
  "Total supply of the token"
  totalSupply: BigInt!
  "holders"
  holders: [User!]!
  "total number of unique holders"
  uniqueHolders: BigInt!
  "amount of moxie used to buy or sell this subject token"
  volume: BigInt!
  "snapshots"
  hourlySnapshots: [SubjectHourlySnapshot!]! @derivedFrom(field: "subject")
  dailySnapshots: [SubjectDailySnapshot!]! @derivedFrom(field: "subject")

  "total beneficiary fees collected"
  beneficiaryFee: BigInt!
  "total protocl fees collected"
  protcolFee: BigInt!
  "beneficiary fee transfer"
  beneficiaryFeeTransfers: [SubjectFeeTransfer!]! @derivedFrom(field: "subject")
  "protocol fee transfers"
  protocolFeeTransfers: [ProtocolFeeTransfer!]! @derivedFrom(field: "subject")
  "portfolios with this subject"
  portfolio: [Portfolio!]! @derivedFrom(field: "subject")
}

type Portfolio @entity {
  "User's address+-+Subject's token address"
  id: ID!
  "User's address"
  user: User!
  "Subject's token address"
  subject: Subject!
  "Net quantity of the subject token by the user"
  balance: BigInt!
  "Moxie spent by user to buy the subject token"
  protocolTokenSpent: BigInt!
  "Orders associated with the user's portfolio"
  orders: [Order!]! @derivedFrom(field: "portfolio")
}

type User @entity {
  "Ethereum address of the user"
  id: ID!
  "User's Portfolio for each subject token he/she holds"
  portfolio: [Portfolio!]! @derivedFrom(field: "user")
  "buyOrders placed by the user"
  buyOrders: [Order!]!
  "sellOrders placed by the user"
  sellOrders: [Order!]!
  "auctionOrders placed by the user"
  auctionOrders: [Order!]!
  "orders including auction & buyOrders"
  protocolOrders: [Order!]!
  "beneficiary fee transfers"
  subjectFeeTransfer: [SubjectFeeTransfer!]!
  "total moxie spent by the user"
  protocolTokenSpent: BigInt!
}

type Order @entity {
  "txHash+-+logIndex"
  id: ID!
  "Moxie Token address"
  protocolToken: Bytes!
  "Amount of moxie token"
  protocolTokenAmount: BigInt!
  "Subject Token address"
  subjectToken: Subject!
  "Amount of subject token"
  subjectAmount: BigInt!
  "Amount of subject token Left to be sold in the order"
  subjectAmountLeft: BigInt!
  "investment amount in moxie"
  protocolTokenInvestment: BigDecimal!
  "Price of the subject token"
  price: BigDecimal!
  "BUY/SELL order type"
  orderType: OrderType
  "Seller/Buyer of Fan token"
  user: User!
  "associated portfolio"
  portfolio: Portfolio!
  "subject fee transaction"
  subjectFeeTransfer: SubjectFeeTransfer! @derivedFrom(field: "order")
  "protocol fee transaction"
  protocolFeeTransfer: ProtocolFeeTransfer! @derivedFrom(field: "order")
  "block information"
  blockInfo: BlockInfo!
}
enum OrderType {
  SELL
  BUY
  AUCTION
}

type ProtocolFeeBeneficiary @entity {
  "address of the beneficiary"
  id: ID!
  "address of the beneficiary"
  beneficiary: Bytes!
  "total fees collected by the protocol"
  totalFees: BigInt!

  "protocol fee transfers"
  protocolFeeTransfers: [ProtocolFeeTransfer!]! @derivedFrom(field: "beneficiary")
}

type ProtocolFeeTransfer @entity {
  "txHash+-+logIndex"
  id: ID!
  "txHash of the transaction"
  txHash: Bytes!
  "block information"
  blockInfo: BlockInfo!
  "order"
  order: Order!
  "subject token address"
  subject: Subject!
  "ProtocolFee Beneficiary"
  beneficiary: ProtocolFeeBeneficiary!
  "amount of moxie transferred"
  amount: BigInt!
}

type SubjectFeeTransfer @entity {
  "txHash"
  id: ID!
  "txHash of the transaction"
  txHash: Bytes!
  "block information"
  blockInfo: BlockInfo!
  "order"
  order: Order!
  "subject token address"
  subject: Subject!
  "address of the beneficiary"
  beneficiary: User
  "amount of moxie transferred"
  amount: BigInt!
}

type Summary @entity {
  id: ID!
  totalTokensIssued: BigInt!
  totalReserve: BigInt!
  activeProtocolFeeBeneficiary: ProtocolFeeBeneficiary!
  protocolBuyFeePct: BigInt!
  protocolSellFeePct: BigInt!
  subjectBuyFeePct: BigInt!
  subjectSellFeePct: BigInt!
}

type MoxieTransfer @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: AuctionTransfer!
  from: Bytes!
  to: Bytes!
  value: BigInt!
  blockInfo: BlockInfo!
}

type AuctionNewSellOrder @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: AuctionTransfer!
  "auctioning token Subject"
  subject: Subject!
  userId: BigInt!
  buyAmount: BigInt!
  sellAmount: BigInt!
}

type AuctionClaimedFromOrder @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: AuctionTransfer!
  "auctioning token Subject"
  subject: Subject!
  userId: BigInt!
  buyAmount: BigInt!
  sellAmount: BigInt!
}

type AuctionCancellationSellOrder @entity {
  "txHash+-+logIndex"
  id: ID!
  txHash: AuctionTransfer!
  "auctioning token Subject"
  subject: Subject!
  userId: BigInt!
  buyAmount: BigInt!
  sellAmount: BigInt!
}

type AuctioningToken @entity {
  "auctionId"
  id: ID!
  "auctioning token Subject"
  subject: Subject!
}

type AuctionOrder @entity {
  "subjectId+-+userId+-+buyAmount+-+sellAmount"
  id: ID!
  "associated protocol order"
  order: Order!
  auctionClaimedFromOrder: AuctionClaimedFromOrder
  auctionCancellationSellOrder: AuctionCancellationSellOrder
  auctionNewSellOrder: AuctionNewSellOrder
}

type AuctionTransfer @entity {
  "txhash"
  id: ID!
  subjectTokenTransfer: [SubjectTokenTransferTx!]! @derivedFrom(field: "txHash")
  moxieTransfer: [MoxieTransfer!]! @derivedFrom(field: "txHash")
  auctionClaimedFromOrder: [AuctionClaimedFromOrder!]! @derivedFrom(field: "txHash")
  auctionNewSellOrder: [AuctionNewSellOrder!]! @derivedFrom(field: "txHash")
  auctionCancellationSellOrder: [AuctionCancellationSellOrder!]! @derivedFrom(field: "txHash")
}
